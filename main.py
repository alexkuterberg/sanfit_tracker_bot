import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ParseMode

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

user_data = {
    "last_hcg": None,
    "supplements": set(),
    "workouts_done": [],
    "weight_log": []
}

TRAINING_DAYS = {
    1: "üèãÔ∏è –í–¢–û–†–ù–ò–ö ‚Äî –§—É–ª–±–∞–¥–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1\n–ü—Ä–µ—Å—Å, –Ω–æ–≥–∏, —Å–ø–∏–Ω–∞, –≥—Ä—É–¥—å, –ø–ª–µ—á–∏, —Ä—É–∫–∏",
    3: "üèãÔ∏è –ß–ï–¢–í–ï–†–ì ‚Äî –§—É–ª–±–∞–¥–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2\n–ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –æ–±—ä—ë–º, –¥—Ä—É–≥–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
    5: "üèãÔ∏è –°–£–ë–ë–û–¢–ê ‚Äî –õ—ë–≥–∫–∏–π –æ–±—ä–µ–º + –ø–∞–º–ø\n–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
}

SUPPLEMENTS = {
    "—É—Ç—Ä–æ": ["D3", "–•—Ä–æ–º", "–ï–∂–æ–≤–∏–∫", "Testobooster"],
    "–¥–µ–Ω—å": ["Q10 + ALA", "Microbiome Booster"],
    "–≤–µ—á–µ—Ä": ["–û–º–µ–≥–∞-3", "–ú–∞–≥–Ω–∏–π", "–¶–∏–Ω–∫", "5-HTP"]
}

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, –°–∞–Ω—è! –≠—Ç–æ —Ç–≤–æ–π –±–æ—Ç:\n/today ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n/done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å\n/bady ‚Äî —á–µ–∫–ª–∏—Å—Ç\n/hcg ‚Äî –•–ì–ß –ª–æ–≥\n/weight XX.X ‚Äî –≤–µ—Å\n/log ‚Äî –∏—Å—Ç–æ—Ä–∏—è")

@dp.message_handler(commands=["today"])
async def today_plan(message: types.Message):
    weekday = datetime.now().weekday()
    plan = TRAINING_DAYS.get(weekday, "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –æ—Ç–¥—ã—Ö–∞–π!")
    await message.reply(plan)

@dp.message_handler(commands=["done"])
async def mark_done(message: types.Message):
    date_str = datetime.now().strftime("%Y-%m-%d")
    user_data["workouts_done"].append(date_str)
    await message.reply(f"–û—Ç–º–µ—Ç–∏–ª! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞ {date_str} –∑–∞–ø–∏—Å–∞–Ω–∞.")

@dp.message_handler(commands=["bady"])
async def supplements_checklist(message: types.Message):
    response = "üíä <b>–ë–ê–î—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
    for time, supps in SUPPLEMENTS.items():
        response += f"üïí <b>{time.capitalize()}:</b> " + ", ".join(supps) + "\n"
    await message.reply(response, parse_mode="HTML")

@dp.message_handler(commands=["hcg"])
async def hcg_check(message: types.Message):
    today = datetime.now().strftime("%Y-%m-%d")
    last = user_data["last_hcg"]
    reply = f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–Ω—ä–µ–∫—Ü–∏—è: {last or '–Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞'}\n–°–µ–≥–æ–¥–Ω—è: {today}\n–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ /hcg_done"
    await message.reply(reply)

@dp.message_handler(commands=["hcg_done"])
async def mark_hcg(message: types.Message):
    today = datetime.now().strftime("%Y-%m-%d")
    user_data["last_hcg"] = today
    await message.reply(f"–ò–Ω—ä–µ–∫—Ü–∏—è –•–ì–ß –∑–∞ {today} –∑–∞–ø–∏—Å–∞–Ω–∞.")

@dp.message_handler(commands=["log"])
async def show_log(message: types.Message):
    log = "üìù <b>–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è:</b>\n"
    log += f"üìå –•–ì–ß: {user_data['last_hcg'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    log += f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {len(user_data['workouts_done'])}\n"
    log += f"‚öñÔ∏è –í–µ—Å–æ–≤ –≤ –ª–æ–≥–µ: {len(user_data['weight_log'])}"
    await message.reply(log, parse_mode="HTML")

@dp.message_handler(commands=["weight"])
async def log_weight(message: types.Message):
    try:
        weight = float(message.text.split()[1])
        user_data["weight_log"].append((datetime.now().strftime("%Y-%m-%d"), weight))
        await message.reply(f"–í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω.")
    except:
        await message.reply("–§–æ—Ä–º–∞—Ç: /weight 91.6")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)