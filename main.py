import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode

API_TOKEN = "7342845325:AAGsgT0hM6byu8J_uwbFhdhkakfao5BHiAg"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –°–∞–Ω—è! –≠—Ç–æ —Ç–≤–æ–π –±–æ—Ç:\n/today ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n/done ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å\n/day ‚Äî —á–µ–∫–ª–∏—Å—Ç\n/hcg ‚Äî –•–ì–ß –ª–æ–≥\n/weight_XX.X ‚Äî –≤–µ—Å\n/log ‚Äî –∏—Å—Ç–æ—Ä–∏—è"
    )

# –ö–æ–º–∞–Ω–¥–∞ /today
@dp.message(F.text == "/today")
async def cmd_today(message: types.Message):
    await message.answer("–°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ üí™\n18:00 ‚Äî –∑–∞–ª!")

# –ö–æ–º–∞–Ω–¥–∞ /done
@dp.message(F.text == "/done")
async def cmd_done(message: types.Message):
    await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ ‚úÖ")

# –ö–æ–º–∞–Ω–¥–∞ /day
@dp.message(F.text == "/day")
async def cmd_day(message: types.Message):
    await message.answer("–ß–µ–∫–ª–∏—Å—Ç: \n- –ë–ê–î—ã –ø—Ä–∏–Ω—è–ª?\n- –í–æ–¥—ã –ø–æ–ø–∏–ª?\n- –£—Ç—Ä–æ –Ω–∞—á–∞–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ?")

# –ö–æ–º–∞–Ω–¥–∞ /hcg
@dp.message(F.text == "/hcg")
async def cmd_hcg(message: types.Message):
    await message.answer("–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–Ω—ä–µ–∫—Ü–∏—è –•–ì–ß: üß¨\n(–ª–æ–≥–∏–∫–∞ –ø–æ–∑–∂–µ)")

# –ö–æ–º–∞–Ω–¥–∞ /log
@dp.message(F.text == "/log")
async def cmd_log(message: types.Message):
    await message.answer("–í–æ—Ç —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üìä\n(–∑–∞–ø–∏—Å—å –ø–æ–∑–∂–µ)")

# –ö–æ–º–∞–Ω–¥–∞ /weight_XX
@dp.message(F.text.startswith("/weight_"))
async def cmd_weight(message: types.Message):
    try:
        weight = message.text.split("_")[1]
        await message.answer(f"–í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω ‚öñÔ∏è")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç: /weight_91.6")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
